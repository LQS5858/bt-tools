
const path = require('path')
const uppercamelcase = require('uppercamelcase')
const fs = require('fs')
const render = require('json-templater/string')
let out_path = path.resolve(__dirname, '../index.js')
let import_template = "import {{name}} from './src/{{package}}.js';"
let install_template = '{{name}}';
let endOfLine = require('os').EOL
let main_template = `
/* Automatically generated by './build/bin/build-entry.js' */
{{include}}
import typeOf from './src/demo'
 

export {
    typeOf,
    {{install}}
}
`
let componentArr = []
const files = fs.readdirSync(path.resolve(__dirname, '../src'))
console.log('files', files, files[0]);
files.forEach((item, index) => {
    if (!/\.js$/.test(item)) return
    let name = item.split('.')[0]
    componentArr.push(name)
})
let includeTemplateArr = []
let installTemplateArr = []
componentArr.forEach(name => {
    if (/demo/gi.test(name)) return
    let componentName = uppercamelcase(name)
    includeTemplateArr.push(render(import_template, {
        name: componentName,
        package: name
    }))
    installTemplateArr.push(render(install_template, {
        name: componentName
    }))
})
let template = render(main_template, {
    include: includeTemplateArr.join(endOfLine),
    install: installTemplateArr.join(',' + endOfLine)
})

try {
    fs.writeFileSync(out_path, template)
} catch (error) {
    console.log('写文件出错', error);
}





